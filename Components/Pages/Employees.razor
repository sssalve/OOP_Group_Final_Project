@page "/Employees"  
@using System.Globalization
@using OOP_Group_Final_Project
@using OOP_Group_Final_Project.Services
@using Blazorise
@inject NavigationManager Nav
@inject IEmployeeService EmployeeService


<div class="employee-page">
    <div class="header">
        <h3>Employee Management</h3>
        <button class="btn btn-primary" @onclick="AddNewEmployee">
            Log out
        </button>
    </div>

    <div class="employee-container">
        <!-- List All Employees -->
        <div class="employee-list">
            <div class="list-search">
                <input type="search"
                       placeholder="Search"
                       @bind="searchTerm"
                       @bind:event="oninput" />
            </div>

            @if (employees == null)
            {
                <p>Loading employees...</p>
            }
            else
            {
                <ul>
                    @foreach (var emp in filteredEmployees)
                    {
                        <li @onclick="() => SelectEmployee(emp)"
                            class="@(selectedEmployee?.EmployeeID == emp.EmployeeID ? "selected" : "")">
                            <div class="avatar">
                                @(string.IsNullOrEmpty(emp.FirstName) ? "?" : emp.FirstName[0])
                                @(string.IsNullOrEmpty(emp.LastName) ? "" : emp.LastName[0])
                            </div>
                            <div>
                                <div class="name">@emp.FirstName @emp.LastName</div>
                                <div class="sub">@emp.Position</div>
                            </div>
                            <span class="status-dot @(emp.DateDeparted == null ? "active" : "departed")"
                                  title="@(emp.DateDeparted == null ? "Active" : $"Departed {emp.DateDeparted:yyyy-MM-dd}")"></span>
                        </li>
                    }
                </ul>
            }

            <button class="btn btn-primary" style="width:100%; margin-top:10px" @onclick="AddNewEmployee">Add</button>
        </div>

        <!-- Display Employee Details -->
        <div class="employee-details">
            @if (isAddingNew)
            {
                <h4>Add New Employee</h4>
                <EditForm Model="newEmployee" OnValidSubmit="SaveNewEmployee">
                    <DataAnnotationsValidator />
                    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                    <div class="section">
                        <h4>Identity</h4>
                        <div class="detail-grid">
                            <div class="detail-group">
                                <label>First Name</label>
                                <InputText @bind-Value="newEmployee.FirstName" class="form-control" />
                            </div>
                            <div class="detail-group">
                                <label>Last Name</label>
                                <InputText @bind-Value="newEmployee.LastName" class="form-control" />
                            </div>
                            <div class="detail-group" style="grid-column:1/-1">
                                <label>Email</label>
                                <InputText @bind-Value="newEmployee.Email" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <h4>Role and Pay</h4>
                        <div class="detail-grid">
                            <div class="detail-group">
                                <label>Position</label>
                                <InputText @bind-Value="newEmployee.Position" class="form-control" />
                            </div>
                            <div class="detail-group">
                                <label>Salary</label>
                                <InputNumber TValue="decimal" @bind-Value="newEmployee.Salary" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <h4>Dates and Performance</h4>
                        <div class="detail-grid">
                            <div class="detail-group">
                                <label>Hiring Date</label>
                                <DatePicker TValue="DateTime"
                                            @bind-Date="newEmployee.DateHired"
                                            AutoClose="true"
                                            Editable="false"
                                            Max="@DateTime.Today" />
                            </div>
                            <div class="detail-group">
                                <label>Departed Date (optional)</label>
                                <DatePicker TValue="DateTime?"
                                            @bind-Date="newEmployee.DateDeparted"
                                            AutoClose="true"
                                            Editable="false"
                                            Min="@(newEmployee.DateHired == default ? null : new DateTime?(newEmployee.DateHired))"
                                            Clearable="true" />
                            </div>
                            <div class="detail-group" style="grid-column:1/-1">
                                <label>Performance (1–5)</label>
                                <InputNumber TValue="int" @bind-Value="newEmployee.Performance" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="button-group">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelAddNew">Cancel</button>
                    </div>
                </EditForm>
            }
            else if (selectedEmployee != null)
            {
                <div class="section">
                    <h4>Identity</h4>
                    <div class="detail-grid">
                        <div class="detail-group">
                            <label>First Name</label>
                            <div>@selectedEmployee.FirstName</div>
                        </div>
                        <div class="detail-group">
                            <label>Last Name</label>
                            <div>@selectedEmployee.LastName</div>
                        </div>
                        <div class="detail-group" style="grid-column:1/-1">
                            <label>Email</label>
                            <div>@selectedEmployee.Email</div>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h4>Role and Pay</h4>
                    <div class="detail-grid">
                        <div class="detail-group">
                            <label>Position</label>
                            <div>@selectedEmployee.Position</div>
                        </div>
                        <div class="detail-group">
                            <label>Salary</label>
                            <div>@selectedEmployee.Salary.ToString("C0", CultureInfo.CurrentCulture)</div>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h4>Dates and Performance</h4>
                    <div class="detail-grid">
                        <div class="detail-group">
                            <label>Hiring Date</label>
                            <div>@selectedEmployee.DateHired.ToString("yyyy-MM-dd")</div>
                        </div>
                        <div class="detail-group">
                            <label>Departed Date</label>
                            <div>@(selectedEmployee.DateDeparted?.ToString("yyyy-MM-dd") ?? "—")</div>
                        </div>
                        <div class="detail-group" style="grid-column:1/-1">
                            <label>Performance</label>
                            <div>@selectedEmployee.Performance</div>
                        </div>
                    </div>
                </div>

                <div class="action-button">
                    <button class="btn btn-edit" @onclick="StartUpdate">Edit</button>
                    <button class="btn btn-delete" @onclick="DeleteEmployee">Delete</button>
                </div>
            }
            else
            {
                <p>Select an employee to view details</p>
            }
        </div>
    </div>
</div>

@code {
    private List<Employee>? employees;
    private Employee? selectedEmployee;
    private bool isAddingNew = false;
    private Employee newEmployee = new Employee();
    private bool isUpdating = false;
    private string searchTerm = string.Empty; //added search bar
    private IEnumerable<Employee> filteredEmployees =>
        string.IsNullOrWhiteSpace(searchTerm) || employees is null
            ? employees ?? Enumerable.Empty<Employee>()
            : employees.Where(e =>
                $"{e.FirstName} {e.LastName} {e.Email} {e.Position}"
                .Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetAllEmployeesAsync();
    }

    private void SelectEmployee(Employee employee)
    {
        selectedEmployee = employee;
        isAddingNew = false;
        isUpdating = false;
    }

    private void AddNewEmployee()
    {
        newEmployee = new Employee
        {
            DateHired = DateTime.Today
        };
        isAddingNew = true;
        selectedEmployee = null;
        isUpdating = false;
    }

    private async Task SaveNewEmployee()
    {
        await EmployeeService.AddEmployeeAsync(newEmployee);
        employees = await EmployeeService.GetAllEmployeesAsync();
        isAddingNew = false;
    }

    private void CancelAddNew()
    {
        isAddingNew = false;
    }

    private void StartUpdate()
    {
        isUpdating = true;
        newEmployee = new Employee
        {
            EmployeeID = selectedEmployee.EmployeeID,
            FirstName = selectedEmployee.FirstName,
            LastName = selectedEmployee.LastName,
            Position = selectedEmployee.Position,
            Salary = selectedEmployee.Salary,
            Email = selectedEmployee.Email,
            Performance = selectedEmployee.Performance,
            DateHired = selectedEmployee.DateHired,
            DateDeparted = selectedEmployee.DateDeparted

        };
    }

    private async Task DeleteEmployee()
    {
        if (selectedEmployee != null)
        {
            await EmployeeService.DeleteEmployeeAsync(selectedEmployee.EmployeeID);
            employees = await EmployeeService.GetAllEmployeesAsync();
            selectedEmployee = null;
        }
    }
}