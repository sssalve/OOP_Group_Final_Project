@page "/Employees"  
@layout Layout.MainLayout
@using OOP_Group_Final_Project
@using OOP_Group_Final_Project.Services
@inject IEmployeeService EmployeeService


<div class="employee-page">
    <div class="header">
        <h3>Employee Management</h3>
        <button class="btn btn-primary" @onclick="StartAddEmployee">
            Add New Employee
        </button>
    </div>

    <div class="employee-container">
        <!-- List All Employees -->
        <div class="employee-list">
            <h4>Employees</h4>
            @if (employees == null)
            {
                <p>Loading employees...</p>
            }
            else
            {
                <ul>
                    @foreach (var emp in employees)
                    {
                        <li @onclick="() => SelectEmployee(emp)" 
                            class="@(selectedEmployee?.EmployeeID == emp.EmployeeID ? "selected" : "")">
                            @emp.FirstName @emp.LastName
                        </li>
                    }
                </ul>
            }
        </div>

        <!-- Display Employee Details -->
        <div class="employee-details">
            @if (!isPayTypeSelected)
            {
                <div class="form-group">
                    <h3>Employee Pay Type</h3>
                    <button class="btn btn-primary" @onclick="AddNewSalaryEmployee">
                        Salary Employee
                    </button>

                    <button class="btn btn-primary" @onclick="AddNewHourlyEmployee">
                        Hourly Employee
                    </button>
                </div>
            }

            @if (isAddingNew)
            {
                <h4>Add New Employee</h4>
                <EditForm Model="newEmployee" OnValidSubmit="SaveNewEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>First Name:</label>
                        <InputText @bind-Value="newEmployee.FirstName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Last Name:</label>
                        <InputText @bind-Value="newEmployee.LastName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Position:</label>
                        <InputText @bind-Value="newEmployee.Position" class="form-control" />
                    </div>
                    @if (payType == "salary")
                    {
                        <div class="form-group">
                            <label>Salary:</label>
                            <InputNumber @bind-Value="newEmployee.Pay" class="form-control" />
                        </div>
                    }
                    @if (payType == "hourly")
                    {
                        <div class="form-group">
                            <label>Wage:</label>
                            <InputNumber @bind-Value="newEmployee.Pay" class="form-control" />
                        </div>
                    }
                    
                    <div class="form-group">
                        <label>Email:</label>
                        <InputText @bind-Value="newEmployee.Email" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Performance (1–5):</label>
                        <InputNumber @bind-Value="newEmployee.Performance" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Hiring date:</label>
                        <InputDate @bind-Value="newEmployee.DateHired" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelAddNew">Cancel</button>
                </EditForm>
            }
            else if (selectedEmployee != null)
            {
                <h4>Employee Details</h4>
                <div class="detail-group">
                    <label>ID:</label>
                    <div>@selectedEmployee.EmployeeID</div>
                </div>
                <div class="detail-group">
                    <label>First Name:</label>
                    <div>@selectedEmployee.FirstName</div>
                </div>
                <div class="detail-group">
                    <label>Last Name:</label>
                    <div>@selectedEmployee.LastName</div>
                </div>
                <div class="detail-group">
                    <label>Position:</label>
                    <div>@selectedEmployee.Position</div>
                </div>
                @if (selectedEmployee.Pay > 1000)
                {
                    <div class="detail-group">
                        <label>Salary:</label>
                        <div>@selectedEmployee.Pay</div>
                    </div>
                }
                else
                {
                    <div class="detail-group">
                        <label>Wage:</label>
                        <div>@selectedEmployee.Pay</div>
                    </div>
                }
                <div class="detail-group">
                    <label>Email:</label>
                    <div>@selectedEmployee.Email</div>
                </div>

                <div class="detail-group">
                    <label>Performance:</label>
                    <div>@selectedEmployee.Performance</div>
                </div>

                <div class="detail-group">
                    <label>Hiring Date:</label>
                    <div>@selectedEmployee.DateHired</div>
                </div>

                <div class="button-group">
                    <button class="btn btn-primary" @onclick="StartUpdate">Update Employee</button>
                    <button class="btn btn-danger" @onclick="DeleteEmployee">Delete Employee</button>
                </div>
            }
            else
            {
                <p>Select an employee to view details</p>
            }
        </div>
    </div>
</div>
@code {
    private List<Employee> employees;
    private Employee selectedEmployee = null;
    private bool isAddingNew = false;
    private Employee newEmployee;
    private bool isUpdating = false;
    private bool isPayTypeSelected = true;
    private string payType;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetAllEmployeesAsync();
    }

    private void SelectEmployee(Employee employee)
    {
        selectedEmployee = employee;
        isAddingNew = false;
        isUpdating = false;
        isPayTypeSelected = true;
    }

    private void StartAddEmployee()
    {
        isAddingNew = false;
        selectedEmployee = null;
        isUpdating = false;
        isPayTypeSelected = false;
    }

    private void AddNewSalaryEmployee()
    {
        newEmployee = new Salaried();
        isAddingNew = true;
        selectedEmployee = null;
        isUpdating = false;
        isPayTypeSelected = true;
        payType = "salary";
    }

    private void AddNewHourlyEmployee()
    {
        newEmployee = new FullTime();
        isAddingNew = true;
        selectedEmployee = null;
        isUpdating = false;
        isPayTypeSelected = true;
        payType = "hourly";
    }

    private async Task SaveNewEmployee()
    {
        await EmployeeService.AddEmployeeAsync(newEmployee);
        employees = await EmployeeService.GetAllEmployeesAsync();
        isAddingNew = false;
    }

    private void CancelAddNew()
    {
        isAddingNew = false;
    }

    private void StartUpdate()
    {
        isUpdating = true;
        if (selectedEmployee.Pay > 1000)
        {
            Salaried newEmployee = new Salaried()
            {
                EmployeeID = selectedEmployee.EmployeeID,
                FirstName = selectedEmployee.FirstName,
                LastName = selectedEmployee.LastName,
                Position = selectedEmployee.Position,
                Pay = selectedEmployee.GetPay(),
                Email = selectedEmployee.Email,
                DateHired = selectedEmployee.DateHired,
                DateDeparted = selectedEmployee.DateDeparted

            };
        }
        else
        {
            FullTime newEmployee = new FullTime()
            {
                EmployeeID = selectedEmployee.EmployeeID,
                FirstName = selectedEmployee.FirstName,
                LastName = selectedEmployee.LastName,
                Position = selectedEmployee.Position,
                Pay = selectedEmployee.GetPay(),
                Email = selectedEmployee.Email,
                DateHired = selectedEmployee.DateHired,
                DateDeparted = selectedEmployee.DateDeparted

            };
        }
        
    }

    private async Task DeleteEmployee()
    {
        if (selectedEmployee != null)
        {
            await EmployeeService.DeleteEmployeeAsync(selectedEmployee.EmployeeID);
            employees = await EmployeeService.GetAllEmployeesAsync();
            selectedEmployee = null;
        }
    }
}